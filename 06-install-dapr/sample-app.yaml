apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-app
  namespace: myapp
  labels:
    app: sample-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sample-app
  template:
    metadata:
      labels:
        app: sample-app
      annotations:
        dapr.io/enabled: "true"
        dapr.io/app-id: "sample-app"
        dapr.io/app-port: "3000"
        dapr.io/config: "tracing"
    spec:
      containers:
        - name: sample-app
          image: node:16-alpine
          command: ["sh", "-c"]
          args:
            - |
              apk add --no-cache curl
              cat > /app/server.js << 'EOF'
              const http = require('http');
              const url = require('url');
              
              const server = http.createServer((req, res) => {
                const parsedUrl = url.parse(req.url, true);
                
                // Health check endpoint
                if (parsedUrl.pathname === '/health') {
                  res.writeHead(200, { 'Content-Type': 'application/json' });
                  res.end(JSON.stringify({ status: 'healthy', timestamp: new Date().toISOString() }));
                  return;
                }
                
                // Root endpoint
                if (parsedUrl.pathname === '/') {
                  res.writeHead(200, { 'Content-Type': 'application/json' });
                  res.end(JSON.stringify({ 
                    message: 'Hello from Dapr sample app!',
                    timestamp: new Date().toISOString(),
                    daprPort: process.env.DAPR_HTTP_PORT || '3500'
                  }));
                  return;
                }
                
                // Dapr health check endpoint
                if (parsedUrl.pathname === '/v1.0/healthz') {
                  res.writeHead(200, { 'Content-Type': 'application/json' });
                  res.end(JSON.stringify({ status: 'healthy' }));
                  return;
                }
                
                // Default response
                res.writeHead(404, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: 'Not found' }));
              });
              
              const PORT = process.env.PORT || 3000;
              server.listen(PORT, '0.0.0.0', () => {
                console.log(`Sample app listening on port ${PORT}`);
              });
              EOF
              
              node /app/server.js
          ports:
            - containerPort: 3000
          env:
            - name: PORT
              value: "3000"
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 10
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: sample-app-service
  namespace: myapp
spec:
  selector:
    app: sample-app
  ports:
    - port: 80
      targetPort: 3000
  type: ClusterIP
